# -*- coding: utf-8 -*-
"""user.py

This file defines Pydantic schemas for `User`.
These schemas are used for data validation, serialization, and deserialization
of user data, ensuring data consistency when interacting with the API and database.

Purpose:
- To define the structure and data types for user information.
- To validate incoming request data (e.g., when creating new users or updating profiles).
- To serialize outgoing response data (e.g., when retrieving user details).
- To enable ORM mode for seamless conversion between Pydantic models and SQLAlchemy ORM objects.

Key Components:
- `UserBase`, `UserCreate`, `UserUpdate`, `User`: Schemas for managing user data at
  different stages (base, creation, update, full representation).
- `UserPushToken`: Schema specifically for handling push notification tokens.
- `BaseModel`: Pydantic's base class for creating data models.
- `EmailStr`: Pydantic type for email validation.
- `UserRole`: Enum imported from `app.models.user` to ensure valid role values.
- `model_config = ConfigDict(from_attributes=True)`: Enables Pydantic to work directly with SQLAlchemy ORM models (Pydantic v2).
"""

import uuid
from typing import Optional

from pydantic import BaseModel, ConfigDict, EmailStr, Field

from backend.models.user import UserRole


class UserBase(BaseModel):
    """Base Pydantic schema for a user.

    This schema defines the common attributes that are typically present in a user record
    and are used for both creation and retrieval, excluding sensitive or database-generated fields.

    Attributes:
        email (EmailStr): The user's email address. `EmailStr` ensures it's a valid email format.

    """

    email: EmailStr


class UserCreate(UserBase):
    """Pydantic schema for creating a new user.

    This schema extends `UserBase` by adding fields required for user registration,
    such as the plain-text password and an optional role.

    Attributes:
        password (str): The plain-text password for the new user. This will be hashed
                        before storage in the database.
        role (UserRole): The role assigned to the new user. Defaults to `UserRole.DOCTOR`.

    """

    password: str = Field(min_length=8, max_length=64)
    role: UserRole = UserRole.DOCTOR
    mfa_enabled: Optional[bool] = False


class UserUpdate(UserBase):
    """Pydantic schema for updating an existing user.

    This schema extends `UserBase` and is used for validating incoming data
    when updating an existing user's profile. All fields are marked as `Optional`
    to allow for partial updates (PATCH requests), meaning only provided fields
    will be updated.

    Attributes:
        password (Optional[str]): An optional new plain-text password. If provided,
                                  it will be hashed before updating.
        is_active (Optional[bool]): An optional boolean to change the user's active status.
        role (Optional[UserRole]): An optional new role for the user.

    """

    password: Optional[str] = Field(None, min_length=8, max_length=64)
    is_active: Optional[bool] = None
    role: Optional[UserRole] = None
    mfa_enabled: Optional[bool] = None


class User(UserBase):
    """Pydantic schema for a user, including database-generated fields.

    This schema extends `UserBase` by adding fields that are typically
    generated by the database (e.g., `id`, `is_active`, `role`). It is used for
    responses when retrieving user details from the API.

    Attributes:
        id (uuid.UUID): The unique identifier of the user.
        is_active (bool): Whether the user account is active.
        role (UserRole): The user's role within the application.

    """

    id: uuid.UUID
    is_active: bool
    role: UserRole
    mfa_enabled: bool
    mfa_secret: Optional[str] = None

    model_config = ConfigDict(from_attributes=True)


class UserPushToken(BaseModel):
    """Pydantic schema for a user's push notification token.

    This schema is used for validating the push notification token received
    from a client device, which is then stored to enable sending push notifications.

    Attributes:
        token (str): The push notification token string (e.g., FCM token).

    """

    token: str
