"""model_version.py

This file defines Pydantic schemas for `ModelVersion`.
These schemas are used for data validation, serialization, and deserialization
of federated learning model version data, ensuring data consistency when
interacting with the API and database.

Purpose:
- To define the structure and data types for model version data.
- To validate incoming request data (e.g., when creating new model versions).
- To serialize outgoing response data (e.g., when retrieving model version details).
- To enable ORM mode for seamless conversion between Pydantic models and SQLAlchemy ORM objects.

Key Components:
- `ModelVersionBase`, `ModelVersionCreate`, `ModelVersionUpdate`, `ModelVersion`:
  Schemas for managing model version data at different stages (base, creation, update, full).
- `BaseModel`: Pydantic's base class for creating data models.
- `model_config = ConfigDict(from_attributes=True)`: Enables Pydantic to work directly with SQLAlchemy ORM models (Pydantic v2).
"""

import datetime
import uuid
from typing import Optional

from pydantic import BaseModel, ConfigDict


class ModelVersionBase(BaseModel):
    """Base Pydantic schema for a model version.

    This schema defines the common attributes that are typically provided when
    creating or updating a model version record, excluding database-generated fields.

    Attributes:
        version_number (int): The sequential version number of the model.
        avg_accuracy (Optional[float]): The average accuracy of the model. Optional.
        avg_loss (Optional[float]): The average loss of the model. Optional.
        description (Optional[str]): A description of the model version. Optional.
        file_path (str): The file path to the model weights. Required.

    """

    version_number: int
    avg_accuracy: Optional[float] = None
    avg_loss: Optional[float] = None
    description: Optional[str] = None
    file_path: str


class ModelVersionCreate(ModelVersionBase):
    """Pydantic schema for creating a new model version.

    This schema inherits from `ModelVersionBase` and is used specifically for
    validating incoming data when a new model version is submitted to the API.
    It doesn't add any new fields but serves as a distinct type for clarity.
    """

    pass


class ModelVersionUpdate(ModelVersionBase):
    """Pydantic schema for updating an existing model version.

    This schema inherits from `ModelVersionBase` and is used for validating
    incoming data when updating an existing model version. All fields are
    marked as `Optional` (implicitly, as they are in `ModelVersionBase` and
    can be omitted in a PATCH request) to allow for partial updates.
    """

    pass


class ModelVersion(ModelVersionBase):
    """Pydantic schema for a model version, including database-generated fields.

    This schema extends `ModelVersionBase` by adding fields that are typically
    generated by the database (e.g., `id`, `created_at`). It is used for responses
    when retrieving model version details from the API.

    Attributes:
        id (uuid.UUID): The unique identifier of the model version.
        created_at (datetime.datetime): The timestamp when the model version record was created.

    """

    id: uuid.UUID
    created_at: datetime.datetime

    model_config = ConfigDict(from_attributes=True, protected_namespaces=())
