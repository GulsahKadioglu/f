# -*- coding: utf-8 -*-
"""report.py

This file defines Pydantic schemas for `AnalysisReport`.
These schemas are used for data validation, serialization, and deserialization
of analysis report data, ensuring data consistency when interacting with the API
and database.

Purpose:
- To define the structure and data types for analysis report data.
- To validate incoming request data (e.g., when creating new reports).
- To serialize outgoing response data (e.g., when retrieving report details).
- To enable ORM mode for seamless conversion between Pydantic models and SQLAlchemy ORM objects.

Key Components:
- `ReportBase`, `ReportCreate`, `Report`: Schemas for managing report data at
  different stages (base, creation, full representation).
- `BaseModel`: Pydantic's base class for creating data models.
- `ReportStatus`: Enum imported from `app.models.report` to ensure valid status values.
- `model_config = ConfigDict(from_attributes=True)`: Enables Pydantic to work directly with SQLAlchemy ORM models (Pydantic v2).
"""

import datetime
import uuid
from typing import Optional

from pydantic import BaseModel, ConfigDict

from ..models.report import ReportStatus


class ReportBase(BaseModel):
    """Base Pydantic schema for an analysis report.

    This schema defines the common attributes that are typically provided when
    creating a new analysis report, excluding database-generated fields.

    Attributes:
        model_version (str): The version of the machine learning model used for the analysis.
        diagnosis_result (Optional[str]): The diagnosis result (e.g., "Benign", "Malignant").
        image_count (Optional[int]): The number of images analyzed for this report.

    """
    model_config = ConfigDict(protected_namespaces=())

    model_version: str
    diagnosis_result: Optional[str] = None
    image_count: Optional[int] = None


class ReportCreate(ReportBase):
    """Pydantic schema for creating a new analysis report.

    This schema inherits from `ReportBase` and adds fields that are required
    at creation time, such as the initial status.
    """
    status: ReportStatus = ReportStatus.PENDING
    final_confidence_score: Optional[float] = None


class Report(ReportBase):
    """Pydantic schema for an analysis report, including database-generated fields.

    This schema extends `ReportBase` by adding fields that are typically
    generated by the database (e.g., `id`, `created_at`, `status`, `final_confidence_score`).
    It is used for responses when retrieving analysis report details from the API.

    Attributes:
        id (uuid.UUID): The unique identifier of the analysis report.
        created_at (datetime.datetime): The timestamp when the report was created.
        status (ReportStatus): The current processing status of the report.
        final_confidence_score (Optional[float]): The final confidence score of the analysis.
                                                  Optional, as it might not be available until processing is complete.

    """

    id: uuid.UUID
    created_at: datetime.datetime
    status: ReportStatus
    final_confidence_score: Optional[float] = None
    diagnosis_result: Optional[str] = None
    image_count: Optional[int] = None


class ReportStatistics(BaseModel):
    """Pydantic schema for aggregated statistics about analysis reports."""
    total_reports: int
    completed_reports: int
    pending_reports: int
    failed_reports: int
    avg_confidence_score: Optional[float]
    diagnosis_distribution: dict
    avg_images_per_report: Optional[float]

    model_config = ConfigDict(from_attributes=True)


class ReportUpdate(ReportBase):
    """Pydantic schema for updating an existing analysis report.

    This schema inherits from `ReportBase` and is used for validating
    incoming data when updating an existing analysis report. All fields are
    marked as `Optional` to allow for partial updates (PATCH requests).
    """

    model_version: Optional[str] = None
    diagnosis_result: Optional[str] = None
    image_count: Optional[int] = None
    status: Optional[ReportStatus] = None
    final_confidence_score: Optional[float] = None
