# This is the main Nginx configuration file.
# It defines how Nginx handles incoming requests, acts as a reverse proxy,
# and serves static content.

# Defines the number of worker processes.
# Typically, this should be equal to the number of CPU cores.
worker_processes 1;

events {
    # Defines the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024;
}

# The http block contains directives that define how Nginx handles HTTP traffic.
http {
    # Includes the MIME types file, which maps file extensions to content types.
    include mime.types;
    # Sets the default MIME type for files if it cannot be determined from the extension.
    default_type application/octet-stream;

    # Enables or disables the use of sendfile().
    # sendfile() copies data directly between two file descriptors without passing through user space,
    # which can improve performance for static file serving.
    sendfile on;
    # Sets the timeout for keep-alive connections with the client.
    keepalive_timeout 65;

    # Defines an upstream group for the frontend service.
    # Nginx will proxy requests to this group.
    upstream frontend {
        server frontend:3000; # Assumes 'frontend' is the service name in Docker Compose and listens on port 3000.
    }

    # Defines an upstream group for the backend application.
    # Nginx will proxy requests to this group.
    upstream backend {
        server backend:8000; # Assumes 'backend' is the service name in Docker Compose and listens on port 8000.
    }

    # Defines a virtual server that listens for incoming connections.
    server {
        # Listens on port 80 for HTTP connections.
        listen 80;
        # Defines the server name(s) that this virtual server will respond to.
        server_name localhost;

        # Configures a location block for API requests.
        # All requests starting with /api/ will be proxied to the backend application.
        location /api/ {
            # Proxies the request to the 'app' upstream group.
            proxy_pass http://backend/;
            # Sets the Host header to the original host of the request.
            proxy_set_header Host $host;
            # Sets the X-Real-IP header to the client's real IP address.
            proxy_set_header X-Real-IP $remote_addr;
            # Appends the client's IP address to the X-Forwarded-For header.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Sets the X-Forwarded-Proto header to the original protocol (http or https).
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Configures a location block for all other requests.
        # All requests not matching /api/ will be proxied to the frontend service.
        location / {
            # Proxies the request to the 'frontend' upstream group.
            proxy_pass http://frontend/;
            # Sets the Host header to the original host of the request.
            proxy_set_header Host $host;
            # Sets the X-Real-IP header to the client's real IP address.
            proxy_set_header X-Real-IP $remote_addr;
            # Appends the client's IP address to the X-Forwarded-For header.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Sets the X-Forwarded-Proto header to the original protocol (http or https).
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}