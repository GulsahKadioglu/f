/**
 * HomeScreen.tsx
 *
 * This screen serves as the main dashboard for the mobile application, displaying
 * a list of analysis reports generated by the federated learning model. Users can
 * view a summary of each report and navigate to a detailed view for more information.
 *
 * Purpose:
 * - To provide an overview of all available analysis reports.
 * - To enable navigation to `ReportDetailScreen` for in-depth report examination.
 * - To manage data fetching and display loading/empty states.
 *
 * Key Components:
 * - `useState`, `useEffect`: React hooks for managing component state and side effects.
 * - `FlatList`: For efficiently rendering a scrollable list of analysis reports.
 * - `react-native-paper`: UI components (Card, Title, Button, Paragraph, Avatar, ActivityIndicator).
 * - `apiClient`: Custom service for making authenticated API calls to the backend.
 *
 * Data Flow:
 * - `useEffect` hook triggers `fetchReports` on component mount.
 * - `fetchReports` retrieves the list of reports from the backend API (`/api/v1/reports/`).
 * - `reports` state stores the fetched list of analysis reports.
 * - `loading` state indicates whether data is currently being fetched.
 * - `renderItem` defines how each report item is rendered in the `FlatList`.
 * - Navigation actions (`navigation.navigate`) are used to move to `ReportDetailScreen`.
 */

import React, { useState, useEffect } from "react";
import {
  View,
  FlatList,
  StyleSheet,
  Text,
  ActivityIndicator,
} from "react-native";
import { Card, Button, Paragraph, Avatar } from "react-native-paper";
import apiClient from "../services/api";

interface Report {
  id: number;
  created_at: string;
  model_version: string;
  status: string;
  final_confidence_score?: number;
}

/**
 * HomeScreen component.
 *
 * Displays a list of analysis reports fetched from the backend. Each report
 * is presented as a card with basic information, and users can navigate to
 * a detailed view of each report.
 *
 * @param {object} props - Component props.
 * @param {object} props.navigation - The navigation object from React Navigation.
 * @returns {JSX.Element} The Home screen displaying analysis reports.
 */
const HomeScreen = ({ navigation }) => {
  const [reports, setReports] = useState<Report[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchReports = async () => {
      try {
        const response = await apiClient.get("/api/v1/reports/");
        setReports(response.data);
        setError(null);
      } catch (error) {
        console.error(error);
        setError("Failed to load reports.");
      } finally {
        setLoading(false);
      }
    };
    fetchReports();
  }, []);

  /**
   * Renders an individual item in the FlatList of analysis reports.
   *
   * @param {object} params - Parameters for rendering the item.
   * @param {object} params.item - The analysis report object to render.
   * @returns {JSX.Element} A Card component displaying report information.
   */
  const renderItem = useCallback(
    ({ item }) => (
      <Card style={styles.card}>
        <Card.Title
          title={`Report #${item.id}`}
          subtitle={`Created: ${new Date(item.created_at).toLocaleDateString()}`}
          left={(props) => <Avatar.Icon {...props} icon="chart-bar" />}
        />
        <Card.Content>
          <Paragraph>
            This report contains analysis results generated by the federated
            learning model.
          </Paragraph>
        </Card.Content>
        <Card.Actions>
          <Button
            mode="contained"
            onPress={() =>
              navigation.navigate("ReportDetail", { reportId: item.id })
            }
          >
            View Details
          </Button>
        </Card.Actions>
      </Card>
    ),
    [navigation],
  );

  if (loading) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator animating={true} size="large" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.centered}>
        <Text style={styles.emptyText}>{error}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {reports.length === 0 ? (
        <View style={styles.centered}>
          <Text style={styles.emptyText}>No analysis reports found yet.</Text>
        </View>
      ) : (
        <FlatList
          data={reports}
          renderItem={renderItem}
          keyExtractor={(item) => item.id.toString()}
          contentContainerStyle={styles.list}
          onRefresh={fetchReports}
          refreshing={loading}
        />
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f5f5f5",
  },
  list: {
    padding: 16,
  },
  card: {
    marginVertical: 8,
    borderRadius: 12,
    elevation: 4,
  },
  fab: {
    position: "absolute",
    margin: 16,
    right: 0,
    bottom: 0,
  },
  centered: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  emptyText: {
    fontSize: 18,
    color: "#888",
  },
});

export default HomeScreen;
