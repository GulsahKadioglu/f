/**
 * ReportDetailScreen.tsx
 *
 * This screen displays the detailed information of a specific analysis report
 * generated by the federated learning model. It fetches and presents metrics
 * such as average accuracy, average loss, and the number of participating clients
 * for a given report ID.
 *
 * Purpose:
 * - To provide an in-depth view of a single analysis report.
 * - To present key performance indicators of the federated learning model for a specific round.
 * - To manage the loading and error states during data fetching.
 *
 * Key Components:
 * - `useState`, `useEffect`: React hooks for managing component state and side effects.
 * - `@react-navigation/native`: For accessing navigation parameters (`route`).
 * - `react-native-paper`: UI components (Card, Title, Paragraph, Text, ActivityIndicator).
 * - `apiClient`: Custom service for making authenticated API calls to the backend.
 *
 * Data Flow:
 * - `reportId` is received via navigation parameters.
 * - `useEffect` hook triggers `fetchReport` on component mount or `reportId` change.
 * - `fetchReport` retrieves report data from the backend API (`/api/v1/reports/{reportId}`).
 * - `report` state stores the fetched report details.
 * - `loading` and `error` states manage UI rendering based on data fetching status.
 */

import React, { useState, useEffect } from "react";
import { View, StyleSheet, ActivityIndicator, ScrollView } from "react-native";
import { Card, Title, Paragraph, Text } from "react-native-paper";
import apiClient from "../services/api";

interface Report {
  id: number;
  created_at: string;
  model_version: string;
  status: string;
  final_confidence_score?: number;
  avg_accuracy: number;
  avg_loss: number;
  num_clients: number;
  uncertainty_score?: number; // New: Optional uncertainty score
}

/**
 * ReportDetailScreen component.
 *
 * Displays the detailed information for a specific analysis report,
 * fetched from the backend. This includes the report ID, creation date,
 * average accuracy, average loss, and the number of participating clients.
 *
 * @param {object} props - Component props.
 * @param {object} props.route - The route object containing navigation parameters.
 * @param {string} props.route.params.reportId - The ID of the report to display.
 * @returns {JSX.Element} The Report Detail screen.
 */
const ReportDetailScreen = ({ route }) => {
  const { reportId } = route.params;
  const [report, setReport] = useState<Report | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchReport = async () => {
      try {
        setLoading(true);
        const response = await apiClient.get(`/api/v1/reports/${reportId}`);
        setReport(response.data);
      } catch (err) {
        setError("An error occurred while loading report details.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchReport();
  }, [reportId]);

  if (loading) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator animating={true} size="large" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.centered}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  if (!report) {
    return (
      <View style={styles.centered}>
        <Text style={styles.errorText}>Report not found.</Text>
      </View>
    );
  }

  // Main content of the screen, displayed when data is loaded successfully.
  return (
    <ScrollView style={styles.container}>
      {" "}
      <Card style={styles.card}>
        <Card.Content>
          <Title style={styles.title}>Tarama Sonucunuz</Title>

          <View style={styles.detailRow}>
            <Text style={styles.label}>Creation Date:</Text>
            <Text style={styles.value}>
              {new Date(report.created_at).toLocaleDateString()}
            </Text>
          </View>

          <View style={styles.detailRow}>
            <Text style={styles.label}>Average Accuracy:</Text>
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              <Text style={[styles.value, report.avg_accuracy >= 0.8 ? styles.positiveText : styles.negativeText]}>
                {(report.avg_accuracy * 100).toFixed(2)}%
              </Text>
              <Text style={[report.avg_accuracy >= 0.8 ? styles.positiveText : styles.negativeText, { marginLeft: 5 }]}>
                {report.avg_accuracy >= 0.8 ? '✓' : '✗'}
              </Text>
            </View>
          </View>

          <View style={styles.detailRow}>
            <Text style={styles.label}>Average Loss:</Text>
            <Text style={styles.value}>{report.avg_loss.toFixed(4)}</Text>
          </View>

          {report.final_confidence_score !== undefined && (
            <View style={styles.detailRow}>
              <Text style={styles.label}>Final Confidence Score:</Text>
              <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                <Text style={[styles.value, report.final_confidence_score >= 0.8 ? styles.positiveText : report.final_confidence_score < 0.5 ? styles.negativeText : styles.neutralText]}>
                  {(report.final_confidence_score * 100).toFixed(2)}%
                </Text>
                <Text style={[report.final_confidence_score >= 0.8 ? styles.positiveText : report.final_confidence_score < 0.5 ? styles.negativeText : styles.neutralText, { marginLeft: 5 }]}>
                  {report.final_confidence_score >= 0.8 ? '✓' : report.final_confidence_score < 0.5 ? '✗' : '∼'}
                </Text>
              </View>
            </View>
          )}

          {report.uncertainty_score !== undefined && (
            <View style={styles.detailRow}>
              <Text style={styles.label}>Uncertainty Score:</Text>
              <Text style={[styles.value, report.uncertainty_score > 0.5 ? styles.negativeText : styles.positiveText]}>
                {report.uncertainty_score.toFixed(4)}
              </Text>
            </View>
          )}

          <View style={styles.detailRow}>
            <Text style={styles.label}>Number of Participating Clients:</Text>
            <Text style={styles.value}>{report.num_clients}</Text>
          </View>

          <Paragraph style={styles.additionalInfo}>
            More details, graphs, or additional analyses related to the report
            can be added here.
          </Paragraph>
        </Card.Content>
      </Card>
      <Button mode="contained" onPress={() => console.log('Doktor randevusu talep edildi')} style={styles.callToActionButton}>
        Sonuçlarınızı görüşmek için doktorunuzdan randevu alın
      </Button>
    </ScrollView>
  );
};

// StyleSheet for defining the visual styles of the components.
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: "#f5f5f5",
  },
  centered: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  errorText: {
    color: "red",
    fontSize: 16,
  },
  card: {
    marginVertical: 8,
    borderRadius: 12,
    elevation: 4,
  },
  title: {
    fontSize: 22,
    fontWeight: "bold",
    marginBottom: 15,
    color: "#333",
  },
  detailRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 10,
    paddingBottom: 5,
    borderBottomWidth: 1,
    borderBottomColor: "#eee",
  },
  label: {
    fontSize: 16,
    fontWeight: "600",
    color: "#555",
  },
  value: {
    fontSize: 16,
    color: "#333",
  },
  positiveText: {
    color: "green",
    fontWeight: "bold",
  },
  negativeText: {
    color: "red",
    fontWeight: "bold",
  },
  neutralText: {
    color: "orange",
    fontWeight: "bold",
  },
  additionalInfo: {
    marginTop: 20,
    fontStyle: "italic",
    color: "#777",
  },
  callToActionButton: {
    marginTop: 20,
    paddingVertical: 10,
    backgroundColor: "#007bff", // Example color
  },
});

export default ReportDetailScreen;
