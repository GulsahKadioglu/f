{"version":3,"file":"8558.bundle.416231b8be1f400fdb72.js","mappings":"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","sources":["webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/StrategyCallbacks.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolBindings.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolModes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/AnnotationStyleStates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/WorkerTypes.js","webpack:///../../../extensions/cornerstone-dicom-rt/src/id.js","webpack:///../../../extensions/cornerstone-dicom-rt/src/loadRTStruct.js","webpack:///../../../extensions/cornerstone-dicom-rt/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/getCommandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/index.tsx"],"sourcesContent":["var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n    ChangeTypes[\"History\"] = \"History\";\n    ChangeTypes[\"MetadataReferenceModified\"] = \"MetadataReferenceModified\";\n    ChangeTypes[\"LabelChange\"] = \"LabelChange\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Events;\n(function (Events) {\n    Events[\"TOOL_ACTIVATED\"] = \"CORNERSTONE_TOOLS_TOOL_ACTIVATED\";\n    Events[\"TOOLGROUP_VIEWPORT_ADDED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_ADDED\";\n    Events[\"TOOLGROUP_VIEWPORT_REMOVED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_REMOVED\";\n    Events[\"TOOL_MODE_CHANGED\"] = \"CORNERSTONE_TOOLS_TOOL_MODE_CHANGED\";\n    Events[\"CROSSHAIR_TOOL_CENTER_CHANGED\"] = \"CORNERSTONE_TOOLS_CROSSHAIR_TOOL_CENTER_CHANGED\";\n    Events[\"VOLUMECROPPINGCONTROL_TOOL_CHANGED\"] = \"CORNERSTONE_TOOLS_VOLUMECROPPINGCONTROL_TOOL_CHANGED\";\n    Events[\"VOLUMECROPPING_TOOL_CHANGED\"] = \"CORNERSTONE_TOOLS_VOLUMECROPPING_TOOL_CHANGED\";\n    Events[\"ANNOTATION_ADDED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_ADDED\";\n    Events[\"ANNOTATION_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_COMPLETED\";\n    Events[\"ANNOTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_MODIFIED\";\n    Events[\"ANNOTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_REMOVED\";\n    Events[\"ANNOTATION_SELECTION_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE\";\n    Events[\"ANNOTATION_LOCK_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE\";\n    Events[\"ANNOTATION_VISIBILITY_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE\";\n    Events[\"ANNOTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_RENDERED\";\n    Events[\"ANNOTATION_CUT_MERGE_PROCESS_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_CUT_MERGE_PROCESS_COMPLETED\";\n    Events[\"ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\";\n    Events[\"INTERPOLATED_ANNOTATIONS_REMOVED\"] = \"CORNERSTONE_TOOLS_INTERPOLATED_ANNOTATIONS_REMOVED\";\n    Events[\"SEGMENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_RENDERED\";\n    Events[\"SEGMENTATION_REPRESENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_ADDED\";\n    Events[\"SEGMENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_ADDED\";\n    Events[\"SEGMENTATION_REPRESENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REMOVED\";\n    Events[\"SEGMENTATION_REPRESENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED\";\n    Events[\"SEGMENTATION_DATA_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED\";\n    Events[\"HISTORY_UNDO\"] = \"CORNERSTONE_TOOLS_HISTORY_UNDO\";\n    Events[\"HISTORY_REDO\"] = \"CORNERSTONE_TOOLS_HISTORY_REDO\";\n    Events[\"KEY_DOWN\"] = \"CORNERSTONE_TOOLS_KEY_DOWN\";\n    Events[\"KEY_UP\"] = \"CORNERSTONE_TOOLS_KEY_UP\";\n    Events[\"MOUSE_DOWN\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN\";\n    Events[\"MOUSE_UP\"] = \"CORNERSTONE_TOOLS_MOUSE_UP\";\n    Events[\"MOUSE_DOWN_ACTIVATE\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE\";\n    Events[\"MOUSE_DRAG\"] = \"CORNERSTONE_TOOLS_MOUSE_DRAG\";\n    Events[\"MOUSE_MOVE\"] = \"CORNERSTONE_TOOLS_MOUSE_MOVE\";\n    Events[\"MOUSE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_CLICK\";\n    Events[\"MOUSE_DOUBLE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK\";\n    Events[\"MOUSE_WHEEL\"] = \"CORNERSTONE_TOOLS_MOUSE_WHEEL\";\n    Events[\"TOUCH_START\"] = \"CORNERSTONE_TOOLS_TOUCH_START\";\n    Events[\"TOUCH_START_ACTIVATE\"] = \"CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE\";\n    Events[\"TOUCH_PRESS\"] = \"CORNERSTONE_TOOLS_TOUCH_PRESS\";\n    Events[\"TOUCH_DRAG\"] = \"CORNERSTONE_TOOLS_TOUCH_DRAG\";\n    Events[\"TOUCH_END\"] = \"CORNERSTONE_TOOLS_TOUCH_END\";\n    Events[\"TOUCH_TAP\"] = \"CORNERSTONE_TOOLS_TAP\";\n    Events[\"TOUCH_SWIPE\"] = \"CORNERSTONE_TOOLS_SWIPE\";\n})(Events || (Events = {}));\nexport default Events;\n","var SegmentationRepresentations;\n(function (SegmentationRepresentations) {\n    SegmentationRepresentations[\"Labelmap\"] = \"Labelmap\";\n    SegmentationRepresentations[\"Contour\"] = \"Contour\";\n    SegmentationRepresentations[\"Surface\"] = \"Surface\";\n})(SegmentationRepresentations || (SegmentationRepresentations = {}));\nexport default SegmentationRepresentations;\n","var StrategyCallbacks;\n(function (StrategyCallbacks) {\n    StrategyCallbacks[\"OnInteractionStart\"] = \"onInteractionStart\";\n    StrategyCallbacks[\"OnInteractionEnd\"] = \"onInteractionEnd\";\n    StrategyCallbacks[\"Preview\"] = \"preview\";\n    StrategyCallbacks[\"RejectPreview\"] = \"rejectPreview\";\n    StrategyCallbacks[\"AcceptPreview\"] = \"acceptPreview\";\n    StrategyCallbacks[\"Fill\"] = \"fill\";\n    StrategyCallbacks[\"Interpolate\"] = \"interpolate\";\n    StrategyCallbacks[\"StrategyFunction\"] = \"strategyFunction\";\n    StrategyCallbacks[\"CreateIsInThreshold\"] = \"createIsInThreshold\";\n    StrategyCallbacks[\"Initialize\"] = \"initialize\";\n    StrategyCallbacks[\"INTERNAL_setValue\"] = \"setValue\";\n    StrategyCallbacks[\"AddPreview\"] = \"addPreview\";\n    StrategyCallbacks[\"ComputeInnerCircleRadius\"] = \"computeInnerCircleRadius\";\n    StrategyCallbacks[\"GetStatistics\"] = \"getStatistics\";\n    StrategyCallbacks[\"EnsureImageVolumeFor3DManipulation\"] = \"ensureImageVolumeFor3DManipulation\";\n    StrategyCallbacks[\"EnsureSegmentationVolumeFor3DManipulation\"] = \"ensureSegmentationVolumeFor3DManipulation\";\n})(StrategyCallbacks || (StrategyCallbacks = {}));\nexport default StrategyCallbacks;\n","var MouseBindings;\n(function (MouseBindings) {\n    MouseBindings[MouseBindings[\"Primary\"] = 1] = \"Primary\";\n    MouseBindings[MouseBindings[\"Secondary\"] = 2] = \"Secondary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary\"] = 3] = \"Primary_And_Secondary\";\n    MouseBindings[MouseBindings[\"Auxiliary\"] = 4] = \"Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Auxiliary\"] = 5] = \"Primary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Secondary_And_Auxiliary\"] = 6] = \"Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary_And_Auxiliary\"] = 7] = \"Primary_And_Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Fourth_Button\"] = 8] = \"Fourth_Button\";\n    MouseBindings[MouseBindings[\"Fifth_Button\"] = 16] = \"Fifth_Button\";\n    MouseBindings[MouseBindings[\"Wheel\"] = 524288] = \"Wheel\";\n    MouseBindings[MouseBindings[\"Wheel_Primary\"] = 524289] = \"Wheel_Primary\";\n})(MouseBindings || (MouseBindings = {}));\nvar KeyboardBindings;\n(function (KeyboardBindings) {\n    KeyboardBindings[KeyboardBindings[\"Shift\"] = 16] = \"Shift\";\n    KeyboardBindings[KeyboardBindings[\"Ctrl\"] = 17] = \"Ctrl\";\n    KeyboardBindings[KeyboardBindings[\"Alt\"] = 18] = \"Alt\";\n    KeyboardBindings[KeyboardBindings[\"Meta\"] = 91] = \"Meta\";\n    KeyboardBindings[KeyboardBindings[\"ShiftCtrl\"] = 1617] = \"ShiftCtrl\";\n    KeyboardBindings[KeyboardBindings[\"ShiftAlt\"] = 1618] = \"ShiftAlt\";\n    KeyboardBindings[KeyboardBindings[\"ShiftMeta\"] = 1691] = \"ShiftMeta\";\n    KeyboardBindings[KeyboardBindings[\"CtrlAlt\"] = 1718] = \"CtrlAlt\";\n    KeyboardBindings[KeyboardBindings[\"CtrlMeta\"] = 1791] = \"CtrlMeta\";\n    KeyboardBindings[KeyboardBindings[\"AltMeta\"] = 1891] = \"AltMeta\";\n})(KeyboardBindings || (KeyboardBindings = {}));\nexport { MouseBindings, KeyboardBindings };\n","var ToolModes;\n(function (ToolModes) {\n    ToolModes[\"Active\"] = \"Active\";\n    ToolModes[\"Passive\"] = \"Passive\";\n    ToolModes[\"Enabled\"] = \"Enabled\";\n    ToolModes[\"Disabled\"] = \"Disabled\";\n})(ToolModes || (ToolModes = {}));\nexport default ToolModes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","var AnnotationStyleStates;\n(function (AnnotationStyleStates) {\n    AnnotationStyleStates[\"Default\"] = \"\";\n    AnnotationStyleStates[\"Highlighted\"] = \"Highlighted\";\n    AnnotationStyleStates[\"Selected\"] = \"Selected\";\n    AnnotationStyleStates[\"Locked\"] = \"Locked\";\n    AnnotationStyleStates[\"AutoGenerated\"] = \"AutoGenerated\";\n})(AnnotationStyleStates || (AnnotationStyleStates = {}));\nexport default AnnotationStyleStates;\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_LABELMAP\"] = \"Converting Contour to Labelmap\";\n    ChangeTypes[\"POLYSEG_SURFACE_TO_LABELMAP\"] = \"Converting Surfaces to Labelmap\";\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_SURFACE\"] = \"Converting Contour to Surface\";\n    ChangeTypes[\"POLYSEG_LABELMAP_TO_SURFACE\"] = \"Converting Labelmap to Surface\";\n    ChangeTypes[\"SURFACE_CLIPPING\"] = \"Clipping Surfaces\";\n    ChangeTypes[\"COMPUTE_STATISTICS\"] = \"Computing Statistics\";\n    ChangeTypes[\"INTERPOLATE_LABELMAP\"] = \"Interpolating Labelmap\";\n    ChangeTypes[\"COMPUTE_LARGEST_BIDIRECTIONAL\"] = \"Computing Largest Bidirectional\";\n    ChangeTypes[\"GENERATE_CONTOUR_SETS\"] = \"Generating Contour Sets\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\nconst SOPClassHandlerName = 'dicom-rt';\r\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\r\n\r\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\r\n","import dcmjs from 'dcmjs';\r\nconst { DicomMessage, DicomMetaDictionary } = dcmjs.data;\r\nconst dicomlab2RGB = dcmjs.data.Colors.dicomlab2RGB;\r\n\r\nasync function checkAndLoadContourData(instance, datasource) {\r\n  if (!instance || !instance.ROIContourSequence) {\r\n    return Promise.reject('Invalid instance object or ROIContourSequence');\r\n  }\r\n\r\n  const promisesMap = new Map();\r\n\r\n  for (const ROIContour of instance.ROIContourSequence) {\r\n    const referencedROINumber = ROIContour.ReferencedROINumber;\r\n    if (!ROIContour || !ROIContour.ContourSequence) {\r\n      promisesMap.set(referencedROINumber, [Promise.resolve([])]);\r\n      continue;\r\n    }\r\n\r\n    for (const Contour of ROIContour.ContourSequence) {\r\n      if (!Contour || !Contour.ContourData) {\r\n        return Promise.reject('Invalid Contour or ContourData');\r\n      }\r\n\r\n      const contourData = Contour.ContourData;\r\n\r\n      if (Array.isArray(contourData)) {\r\n        promisesMap.has(referencedROINumber)\r\n          ? promisesMap.get(referencedROINumber).push(Promise.resolve(contourData))\r\n          : promisesMap.set(referencedROINumber, [Promise.resolve(contourData)]);\r\n      } else if (contourData && contourData.BulkDataURI) {\r\n        const bulkDataURI = contourData.BulkDataURI;\r\n\r\n        if (!datasource || !datasource.retrieve || !datasource.retrieve.bulkDataURI) {\r\n          return Promise.reject('Invalid datasource object or retrieve function');\r\n        }\r\n\r\n        const bulkDataPromise = datasource.retrieve.bulkDataURI({\r\n          BulkDataURI: bulkDataURI,\r\n          StudyInstanceUID: instance.StudyInstanceUID,\r\n          SeriesInstanceUID: instance.SeriesInstanceUID,\r\n          SOPInstanceUID: instance.SOPInstanceUID,\r\n        });\r\n\r\n        promisesMap.has(referencedROINumber)\r\n          ? promisesMap.get(referencedROINumber).push(bulkDataPromise)\r\n          : promisesMap.set(referencedROINumber, [bulkDataPromise]);\r\n      } else {\r\n        return Promise.reject(`Invalid ContourData: ${contourData}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  const resolvedPromisesMap = new Map();\r\n  for (const [key, promiseArray] of promisesMap.entries()) {\r\n    resolvedPromisesMap.set(key, await Promise.allSettled(promiseArray));\r\n  }\r\n\r\n  instance.ROIContourSequence.forEach(ROIContour => {\r\n    try {\r\n      const referencedROINumber = ROIContour.ReferencedROINumber;\r\n      const resolvedPromises = resolvedPromisesMap.get(referencedROINumber);\r\n\r\n      if (ROIContour.ContourSequence) {\r\n        ROIContour.ContourSequence.forEach((Contour, index) => {\r\n          const promise = resolvedPromises[index];\r\n          if (promise.status === 'fulfilled') {\r\n            if (Array.isArray(promise.value) && promise.value.every(Number.isFinite)) {\r\n              // If promise.value is already an array of numbers, use it directly\r\n              Contour.ContourData = promise.value;\r\n            } else {\r\n              // If the resolved promise value is a byte array (Blob), it needs to be decoded\r\n              const uint8Array = new Uint8Array(promise.value);\r\n              const textDecoder = new TextDecoder();\r\n              const dataUint8Array = textDecoder.decode(uint8Array);\r\n              if (typeof dataUint8Array === 'string' && dataUint8Array.includes('\\\\')) {\r\n                Contour.ContourData = dataUint8Array.split('\\\\').map(parseFloat);\r\n              } else {\r\n                Contour.ContourData = [];\r\n              }\r\n            }\r\n          } else {\r\n            console.error(promise.reason);\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  });\r\n}\r\n\r\nexport default async function loadRTStruct(extensionManager, rtStructDisplaySet, headers) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n  const dataSource = extensionManager.getActiveDataSource()[0];\r\n  const { bulkDataURI } = dataSource.getConfig?.() || {};\r\n\r\n  const { dicomLoaderService } = utilityModule.exports;\r\n\r\n  // Set here is loading is asynchronous.\r\n  // If this function throws its set back to false.\r\n  rtStructDisplaySet.isLoaded = true;\r\n  let instance = rtStructDisplaySet.instance;\r\n\r\n  if (!bulkDataURI || !bulkDataURI.enabled) {\r\n    const segArrayBuffer = await dicomLoaderService.findDicomDataPromise(\r\n      rtStructDisplaySet,\r\n      null,\r\n      headers\r\n    );\r\n\r\n    const dicomData = DicomMessage.readFile(segArrayBuffer);\r\n    const rtStructDataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);\r\n    rtStructDataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\r\n    instance = rtStructDataset;\r\n  } else {\r\n    await checkAndLoadContourData(instance, dataSource);\r\n  }\r\n\r\n  const { StructureSetROISequence, ROIContourSequence, RTROIObservationsSequence } = instance;\r\n\r\n  // Define our structure set entry and add it to the rtstruct module state.\r\n  const structureSet = {\r\n    StructureSetLabel: instance.StructureSetLabel,\r\n    SeriesInstanceUID: instance.SeriesInstanceUID,\r\n    ROIContours: [],\r\n    visible: true,\r\n    ReferencedSOPInstanceUIDsSet: new Set(),\r\n  };\r\n\r\n  for (let i = 0; i < ROIContourSequence.length; i++) {\r\n    const ROIContour = ROIContourSequence[i];\r\n    const { ContourSequence } = ROIContour;\r\n\r\n    if (!ContourSequence) {\r\n      continue;\r\n    }\r\n\r\n    const ContourSequenceArray = _toArray(ContourSequence);\r\n\r\n    const contourPoints = [];\r\n    for (const ContourSequenceItem of ContourSequenceArray) {\r\n      const { ContourData, NumberOfContourPoints, ContourGeometricType, ContourImageSequence } =\r\n        ContourSequenceItem;\r\n\r\n      const points = [];\r\n      for (let p = 0; p < NumberOfContourPoints * 3; p += 3) {\r\n        points.push({\r\n          x: ContourData[p],\r\n          y: ContourData[p + 1],\r\n          z: ContourData[p + 2],\r\n        });\r\n      }\r\n\r\n      const supportedContourTypesMap = new Map([\r\n        ['CLOSED_PLANAR', false],\r\n        ['OPEN_NONPLANAR', false],\r\n        ['OPEN_PLANAR', false],\r\n        ['POINT', true],\r\n      ]);\r\n\r\n      contourPoints.push({\r\n        numberOfPoints: NumberOfContourPoints,\r\n        points,\r\n        type: ContourGeometricType,\r\n        isSupported: supportedContourTypesMap.get(ContourGeometricType) ?? false,\r\n      });\r\n\r\n      if (ContourImageSequence?.ReferencedSOPInstanceUID) {\r\n        structureSet.ReferencedSOPInstanceUIDsSet.add(\r\n          ContourImageSequence?.ReferencedSOPInstanceUID\r\n        );\r\n      }\r\n    }\r\n\r\n    _setROIContourMetadata(\r\n      structureSet,\r\n      StructureSetROISequence,\r\n      RTROIObservationsSequence,\r\n      ROIContour,\r\n      contourPoints\r\n    );\r\n  }\r\n  return structureSet;\r\n}\r\n\r\nfunction _setROIContourMetadata(\r\n  structureSet,\r\n  StructureSetROISequence,\r\n  RTROIObservationsSequence,\r\n  ROIContour,\r\n  contourPoints\r\n) {\r\n  const StructureSetROI = StructureSetROISequence.find(\r\n    structureSetROI => structureSetROI.ROINumber === ROIContour.ReferencedROINumber\r\n  );\r\n\r\n  const ROIContourData = {\r\n    ROINumber: StructureSetROI.ROINumber,\r\n    ROIName: StructureSetROI.ROIName,\r\n    ROIGenerationAlgorithm: StructureSetROI.ROIGenerationAlgorithm,\r\n    ROIDescription: StructureSetROI.ROIDescription,\r\n    contourPoints,\r\n    visible: true,\r\n    colorArray: [],\r\n  };\r\n\r\n  _setROIContourDataColor(ROIContour, ROIContourData);\r\n\r\n  if (RTROIObservationsSequence) {\r\n    // If present, add additional RTROIObservations metadata.\r\n    _setROIContourRTROIObservations(\r\n      ROIContourData,\r\n      RTROIObservationsSequence,\r\n      ROIContour.ReferencedROINumber\r\n    );\r\n  }\r\n\r\n  structureSet.ROIContours.push(ROIContourData);\r\n}\r\n\r\nfunction _setROIContourDataColor(ROIContour, ROIContourData) {\r\n  let { ROIDisplayColor, RecommendedDisplayCIELabValue } = ROIContour;\r\n\r\n  if (!ROIDisplayColor && RecommendedDisplayCIELabValue) {\r\n    // If ROIDisplayColor is absent, try using the RecommendedDisplayCIELabValue color.\r\n    ROIDisplayColor = dicomlab2RGB(RecommendedDisplayCIELabValue);\r\n  }\r\n\r\n  if (ROIDisplayColor) {\r\n    ROIContourData.colorArray = [...ROIDisplayColor];\r\n  }\r\n}\r\n\r\nfunction _setROIContourRTROIObservations(ROIContourData, RTROIObservationsSequence, ROINumber) {\r\n  const RTROIObservations = RTROIObservationsSequence.find(\r\n    RTROIObservations => RTROIObservations.ReferencedROINumber === ROINumber\r\n  );\r\n\r\n  if (RTROIObservations) {\r\n    // Deep copy so we don't keep the reference to the dcmjs dataset entry.\r\n    const { ObservationNumber, ROIObservationDescription, RTROIInterpretedType, ROIInterpreter } =\r\n      RTROIObservations;\r\n\r\n    ROIContourData.RTROIObservations = {\r\n      ObservationNumber,\r\n      ROIObservationDescription,\r\n      RTROIInterpretedType,\r\n      ROIInterpreter,\r\n    };\r\n  }\r\n}\r\n\r\nfunction _toArray(objOrArray) {\r\n  return Array.isArray(objOrArray) ? objOrArray : [objOrArray];\r\n}\r\n","import { utils, Types as OhifTypes } from '@ohif/core';\r\nimport i18n from '@ohif/i18n';\r\n\r\nimport { SOPClassHandlerId } from './id';\r\nimport loadRTStruct from './loadRTStruct';\r\n\r\nconst { sopClassDictionary } = utils;\r\n\r\nconst sopClassUids = [sopClassDictionary.RTStructureSetStorage];\r\n\r\nconst cachedRTStructsSEG = new Set<string>();\r\n\r\nconst loadPromises = {};\r\n\r\nfunction _getDisplaySetsFromSeries(\r\n  instances,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager\r\n) {\r\n  const instance = instances[0];\r\n\r\n  const {\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPClassUID,\r\n    wadoRoot,\r\n    wadoUri,\r\n    wadoUriRoot,\r\n  } = instance;\r\n\r\n  const displaySet = {\r\n    Modality: 'RTSTRUCT',\r\n    loading: false,\r\n    isReconstructable: false,\r\n    displaySetInstanceUID: utils.guid(),\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    referencedImages: null,\r\n    referencedSeriesInstanceUID: null,\r\n    referencedDisplaySetInstanceUID: null,\r\n    isDerivedDisplaySet: true,\r\n    isLoaded: false,\r\n    isHydrated: false,\r\n    structureSet: null,\r\n    sopClassUids,\r\n    instance,\r\n    wadoRoot,\r\n    wadoUriRoot,\r\n    wadoUri,\r\n    isOverlayDisplaySet: true,\r\n    label: SeriesDescription || `${i18n.t('Series')} ${SeriesNumber} - ${i18n.t('RTSTRUCT')}`,\r\n  };\r\n\r\n  let referencedSeriesSequence = instance.ReferencedSeriesSequence;\r\n  if (instance.ReferencedFrameOfReferenceSequence && !instance.ReferencedSeriesSequence) {\r\n    instance.ReferencedSeriesSequence = _deriveReferencedSeriesSequenceFromFrameOfReferenceSequence(\r\n      instance.ReferencedFrameOfReferenceSequence\r\n    );\r\n    referencedSeriesSequence = instance.ReferencedSeriesSequence;\r\n  }\r\n\r\n  if (!referencedSeriesSequence) {\r\n    throw new Error('ReferencedSeriesSequence is missing for the RTSTRUCT');\r\n  }\r\n\r\n  const referencedSeries = referencedSeriesSequence[0];\r\n\r\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\r\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\r\n\r\n  const { displaySetService } = servicesManager.services;\r\n  const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\r\n    displaySet.referencedSeriesInstanceUID\r\n  );\r\n\r\n  if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\r\n    // Instead of throwing error, subscribe to display sets added\r\n    const { unsubscribe } = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\r\n      ({ displaySetsAdded }) => {\r\n        const addedDisplaySet = displaySetsAdded[0];\r\n        if (addedDisplaySet.SeriesInstanceUID === displaySet.referencedSeriesInstanceUID) {\r\n          displaySet.referencedDisplaySetInstanceUID = addedDisplaySet.displaySetInstanceUID;\r\n          displaySet.isReconstructable = addedDisplaySet.isReconstructable;\r\n          unsubscribe();\r\n        }\r\n      }\r\n    );\r\n  } else {\r\n    const referencedDisplaySet = referencedDisplaySets[0];\r\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\r\n    displaySet.isReconstructable = referencedDisplaySet.isReconstructable;\r\n  }\r\n\r\n  displaySet.load = ({ headers, createSegmentation = true }) =>\r\n    _load(displaySet, servicesManager, extensionManager, headers, createSegmentation);\r\n\r\n  return [displaySet];\r\n}\r\n\r\nfunction _load(\r\n  rtDisplaySet,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager,\r\n  headers,\r\n  createSegmentation = true\r\n) {\r\n  const { SOPInstanceUID } = rtDisplaySet;\r\n  const { segmentationService } = servicesManager.services;\r\n\r\n  if (\r\n    (rtDisplaySet.loading || rtDisplaySet.isLoaded) &&\r\n    loadPromises[SOPInstanceUID] &&\r\n    cachedRTStructsSEG.has(rtDisplaySet.displaySetInstanceUID)\r\n  ) {\r\n    return loadPromises[SOPInstanceUID];\r\n  }\r\n\r\n  rtDisplaySet.loading = true;\r\n\r\n  const { unsubscribe } = segmentationService.subscribe(\r\n    segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\r\n    (evt: { rtDisplaySet: { displaySetInstanceUID: string } }) => {\r\n      if (evt.rtDisplaySet?.displaySetInstanceUID === rtDisplaySet.displaySetInstanceUID) {\r\n        cachedRTStructsSEG.add(rtDisplaySet.displaySetInstanceUID);\r\n        unsubscribe();\r\n      }\r\n    }\r\n  );\r\n\r\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\r\n  // and also return the same promise to any other callers.\r\n  loadPromises[SOPInstanceUID] = new Promise<void>(async (resolve, reject) => {\r\n    try {\r\n      if (!rtDisplaySet.structureSet) {\r\n        const structureSet = await loadRTStruct(extensionManager, rtDisplaySet, headers);\r\n        rtDisplaySet.structureSet = structureSet;\r\n      }\r\n\r\n      if (createSegmentation) {\r\n        await segmentationService.createSegmentationForRTDisplaySet(rtDisplaySet);\r\n      }\r\n\r\n      resolve();\r\n    } catch (error) {\r\n      reject(error);\r\n    } finally {\r\n      rtDisplaySet.loading = false;\r\n    }\r\n  });\r\n\r\n  return loadPromises[SOPInstanceUID];\r\n}\r\n\r\nfunction _deriveReferencedSeriesSequenceFromFrameOfReferenceSequence(\r\n  ReferencedFrameOfReferenceSequence\r\n) {\r\n  const ReferencedSeriesSequence = [];\r\n\r\n  ReferencedFrameOfReferenceSequence.forEach(referencedFrameOfReference => {\r\n    const { RTReferencedStudySequence } = referencedFrameOfReference;\r\n\r\n    RTReferencedStudySequence.forEach(rtReferencedStudy => {\r\n      const { RTReferencedSeriesSequence } = rtReferencedStudy;\r\n\r\n      RTReferencedSeriesSequence.forEach(rtReferencedSeries => {\r\n        const ReferencedInstanceSequence = [];\r\n        const { ContourImageSequence, SeriesInstanceUID } = rtReferencedSeries;\r\n\r\n        ContourImageSequence.forEach(contourImage => {\r\n          ReferencedInstanceSequence.push({\r\n            ReferencedSOPInstanceUID: contourImage.ReferencedSOPInstanceUID,\r\n            ReferencedSOPClassUID: contourImage.ReferencedSOPClassUID,\r\n          });\r\n        });\r\n\r\n        const referencedSeries = {\r\n          SeriesInstanceUID,\r\n          ReferencedInstanceSequence,\r\n        };\r\n\r\n        ReferencedSeriesSequence.push(referencedSeries);\r\n      });\r\n    });\r\n  });\r\n\r\n  return ReferencedSeriesSequence;\r\n}\r\n\r\nfunction getSopClassHandlerModule(params: OhifTypes.Extensions.ExtensionParams) {\r\n  const { servicesManager, extensionManager } = params;\r\n\r\n  return [\r\n    {\r\n      name: 'dicom-rt',\r\n      sopClassUids,\r\n      getDisplaySetsFromSeries: instances => {\r\n        return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n      },\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getSopClassHandlerModule;\r\n","import { SegmentationRepresentations } from '@cornerstonejs/tools/enums';\r\n\r\nconst commandsModule = ({ commandsManager, servicesManager }: withAppTypes) => {\r\n  const services = servicesManager.services;\r\n  const { displaySetService, viewportGridService } = services;\r\n\r\n  const actions = {\r\n    hydrateRTSDisplaySet: ({ displaySet, viewportId }) => {\r\n      if (displaySet.Modality !== 'RTSTRUCT') {\r\n        throw new Error('Display set is not an RTSTRUCT');\r\n      }\r\n\r\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(\r\n        displaySet.referencedDisplaySetInstanceUID\r\n      );\r\n\r\n      // update the previously stored segmentationPresentation with the new viewportId\r\n      // presentation so that when we put the referencedDisplaySet back in the viewport\r\n      // it will have the correct segmentation representation hydrated\r\n      commandsManager.runCommand('updateStoredSegmentationPresentation', {\r\n        displaySet: displaySet,\r\n        type: SegmentationRepresentations.Contour,\r\n      });\r\n\r\n      // update the previously stored positionPresentation with the new viewportId\r\n      // presentation so that when we put the referencedDisplaySet back in the viewport\r\n      // it will be in the correct position zoom and pan\r\n      commandsManager.runCommand('updateStoredPositionPresentation', {\r\n        viewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySet.displaySetInstanceUID],\r\n      });\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySet.displaySetInstanceUID],\r\n      });\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    hydrateRTSDisplaySet: {\r\n      commandFn: actions.hydrateRTSDisplaySet,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'cornerstone-dicom-rt',\r\n  };\r\n};\r\n\r\nexport default commandsModule;\r\n","import { id } from './id';\r\nimport React from 'react';\r\nimport { Types } from '@ohif/core';\r\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\r\nimport getCommandsModule from './getCommandsModule';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneRTViewport');\r\n});\r\n\r\nconst OHIFCornerstoneRTViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nconst extension: Types.Extensions.Extension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n  getCommandsModule,\r\n\r\n  /**\r\n   * PanelModule should provide a list of panels that will be available in OHIF\r\n   * for Modes to consume and render. Each panel is defined by a {name,\r\n   * iconName, iconLabel, label, component} object. Example of a panel module\r\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\r\n   */\r\n  getViewportModule({\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n  }: Types.Extensions.ExtensionParams) {\r\n    const ExtendedOHIFCornerstoneRTViewport = props => {\r\n      return (\r\n        <OHIFCornerstoneRTViewport\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          commandsManager={commandsManager}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [{ name: 'dicom-rt', component: ExtendedOHIFCornerstoneRTViewport }];\r\n  },\r\n  /**\r\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\r\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\r\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\r\n   * Examples include the default sop class handler provided by the default extension\r\n   */\r\n  getSopClassHandlerModule,\r\n};\r\n\r\nexport default extension;\r\n"],"names":["ChangeTypes","Events","SegmentationRepresentations","StrategyCallbacks","MouseBindings","KeyboardBindings","ToolModes","Swipe","AnnotationStyleStates","id","packageJson","SOPClassHandlerId","DicomMessage","DicomMetaDictionary","dcmjs","dicomlab2RGB","Colors","async","loadRTStruct","extensionManager","rtStructDisplaySet","headers","utilityModule","getModuleEntry","dataSource","getActiveDataSource","bulkDataURI","getConfig","dicomLoaderService","exports","isLoaded","instance","enabled","datasource","ROIContourSequence","Promise","reject","promisesMap","Map","ROIContour","referencedROINumber","ReferencedROINumber","ContourSequence","Contour","ContourData","contourData","Array","isArray","has","get","push","resolve","set","BulkDataURI","retrieve","bulkDataPromise","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","resolvedPromisesMap","key","promiseArray","entries","allSettled","forEach","resolvedPromises","index","promise","status","value","every","Number","isFinite","uint8Array","Uint8Array","dataUint8Array","TextDecoder","decode","includes","split","map","parseFloat","console","error","reason","checkAndLoadContourData","segArrayBuffer","findDicomDataPromise","dicomData","readFile","rtStructDataset","naturalizeDataset","dict","_meta","namifyDataset","meta","StructureSetROISequence","RTROIObservationsSequence","structureSet","StructureSetLabel","ROIContours","visible","ReferencedSOPInstanceUIDsSet","Set","i","length","ContourSequenceArray","_toArray","contourPoints","ContourSequenceItem","NumberOfContourPoints","ContourGeometricType","ContourImageSequence","points","p","x","y","z","supportedContourTypesMap","numberOfPoints","type","isSupported","ReferencedSOPInstanceUID","add","_setROIContourMetadata","StructureSetROI","find","structureSetROI","ROINumber","ROIContourData","ROIName","ROIGenerationAlgorithm","ROIDescription","colorArray","ROIDisplayColor","RecommendedDisplayCIELabValue","_setROIContourDataColor","RTROIObservations","ObservationNumber","ROIObservationDescription","RTROIInterpretedType","ROIInterpreter","_setROIContourRTROIObservations","objOrArray","sopClassDictionary","utils","sopClassUids","RTStructureSetStorage","cachedRTStructsSEG","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isHydrated","isOverlayDisplaySet","label","i18n","t","referencedSeriesSequence","ReferencedSeriesSequence","ReferencedFrameOfReferenceSequence","referencedFrameOfReference","RTReferencedStudySequence","rtReferencedStudy","RTReferencedSeriesSequence","rtReferencedSeries","ReferencedInstanceSequence","contourImage","ReferencedSOPClassUID","referencedSeries","_deriveReferencedSeriesSequenceFromFrameOfReferenceSequence","Error","displaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","referencedDisplaySet","unsubscribe","subscribe","EVENTS","DISPLAY_SETS_ADDED","displaySetsAdded","addedDisplaySet","load","createSegmentation","rtDisplaySet","segmentationService","SEGMENTATION_LOADING_COMPLETE","evt","createSegmentationForRTDisplaySet","_load","params","name","getDisplaySetsFromSeries","commandsModule","commandsManager","viewportGridService","actions","hydrateRTSDisplaySet","viewportId","getDisplaySetByUID","runCommand","displaySetInstanceUIDs","setDisplaySetsForViewport","definitions","commandFn","storeContexts","options","defaultContext","Component","React","OHIFCornerstoneRTViewport","props","fallback","getCommandsModule","getViewportModule","component","_extends","getSopClassHandlerModule"],"sourceRoot":""}